#Do ggplot
p <- ggplot(df, aes(x = log(Predator.mass), y = log(Prey.mass),
colour = Predator.lifestage))
q <- p + theme_bw() + geom_point(shape=I(3)) +
facet_grid(Type.of.feeding.interaction ~.) + #grid for 1 column
xlab("Prey Mass in grams") +
ylab("Predator Mass in grams") +
theme(legend.position = "bottom") +
geom_smooth(method = "lm", fullrange = TRUE)
print(q)
}
# subset feeding interaction and split into 5 data frames
feed_split <- split(MyDF, MyDF$Type.of.feeding.interaction) #split dataset to list
list2env(feed_split, envir= .GlobalEnv) #split list to separate data sets
predpisc <- `predacious/piscivorous` #the / creates problems
## lm for every life stage of feeding interaction
#insectivorous
counter <- 0
for ( i in unique(insectivorous$Predator.lifestage) ){
#create a subset data
data_sub <- subset(insectivorous, Predator.lifestage == i)
counter <- counter + 1
#create the linear model. If it is the first loop,
#then the model name will be lm_ins1
i <- assign(paste("lm_ins",counter,sep = ""), lm(Prey.mass ~ Predator.mass, insectivorous))
#show many lms created
print(paste("Created lm_ins",counter,sep = ""))
#assign(paste("ins",i), fun1(i)) doesn't work
}
#piscivorous
counter <- 0
for ( i in unique(piscivorous$Predator.lifestage) ){
#create a subset data
data_sub <- subset(piscivorous, Predator.lifestage == i)
counter <- counter + 1
#create the linear model. If it is the first loop,
#then the model name will be lm_pisc 1
assign(paste("lm_pisc", counter,sep = ""), lm(Prey.mass ~ Predator.mass, piscivorous))
#show many lms created
print(paste("Created lm_pisc", counter,sep = ""))
}
#planktivorous
counter <- 0
for ( i in unique(planktivorous$Predator.lifestage) ){
#create a subset data
data_sub <- subset(planktivorous, Predator.lifestage == i)
counter <- counter + 1
#create the linear model. If it is the first loop,
#then the model name will be lm_plank 1
assign(paste("lm_plank", counter,sep = ""), lm(Prey.mass ~ Predator.mass, planktivorous))
#show many lms created
print(paste("Created lm_plank", counter,sep = ""))
}
#predacious
counter <- 0
for ( i in unique(predacious$Predator.lifestage) ){
#create a subset data
data_sub <- subset(predacious,Predator.lifestage == i)
counter <- counter + 1
#create the linear model. If it is the first loop,
#then the model name will be lm_pred 1
assign(paste("lm_pred", counter,sep = ""), lm(Prey.mass ~ Predator.mass, predacious))
#show many lms created
print(paste("Created lm_pred", counter,sep = ""))
}
#predacious/piscivorous
counter <- 0
for ( i in unique(predpisc$Predator.lifestage) ){
#create a subset data
data_sub <- subset(predpisc,Predator.lifestage == i)
counter <- counter + 1
#create the linear model. If it is the first loop,
#then the model name will be lm_prepis 1
assign(paste("lm_prepis", counter,sep = ""), lm(Prey.mass ~ Predator.mass, predpisc))
#show many lms created
print(paste("Created lm_prepis", counter,sep = ""))
}
#function to print summary table
# Can't figure out how to print the input of the function, e.g. lm_pisc1
# function 1 for lm_XX1, function 2 for lm_XX2
fun1<-function(x){
res<-c(paste(as.character(summary(x)$call), "1"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call","intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
fun2<-function(x){
res<-c(paste(as.character(summary(x)$call), "2"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call","intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
fun3<-function(x){
res<-c(paste(as.character(summary(x)$call), "3"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call","intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
fun4<-function(x){
res<-c(paste(as.character(summary(x)$call), "4"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call","intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
fun5<-function(x){
res<-c(paste(as.character(summary(x)$call), "5"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call","intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
fun6<-function(x){
res<-c(paste(as.character(summary(x)$call), "6"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call","intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
ins1 <- fun1(lm_ins1)
pisc1 <- fun1(lm_pisc1)
pisc2 <- fun2(lm_pisc2)
ins1 <- fun1(lm_ins1)
pisc1 <- fun1(lm_pisc1)
pisc2 <- fun2(lm_pisc2)
pisc3 <- fun3(lm_pisc3)
pisc4 <- fun4(lm_pisc4)
pisc5 <- fun5(lm_pisc5)
pisc1 <- fun1(lm_plank1)
ins1 <- fun1(lm_ins1)
pisc1 <- fun1(lm_pisc1)
pisc2 <- fun2(lm_pisc2)
pisc3 <- fun3(lm_pisc3)
pisc4 <- fun4(lm_pisc4)
pisc5 <- fun5(lm_pisc5)
plank1 <- fun1(lm_plank1)
plank2 <- fun1(lm_plank2)
plank3 <- fun1(lm_plank3)
plank4 <- fun1(lm_plank4)
plank5 <- fun1(lm_plank5)
plank1 <- fun1(lm_plank1)
plank2 <- fun2(lm_plank2)
plank3 <- fun3(lm_plank3)
plank4 <- fun4(lm_plank4)
plank5 <- fun5(lm_plank5)
pred1 <- fun1(lm_pred1)
pred2 <- fun2(lm_pred2)
pred3 <- fun3(lm_pred3)
pred4 <- fun4(lm_pred4)
pred5 <- fun5(lm_pred5)
pred6 <- fun6(lm_pred6)
prepis1 <- fun1(lm_prepis1)
re1 <- cbind(ins1, pisc1, pisc2, pisc3, pisc4, pisc5, plank1, plank2, plank4,
plank5, pred1, pred2, pred3, pred4, pred5, pred6, prepis1)
View(re1)
#function to print summary table
# Can't figure out how to print the input of the function, e.g. lm_pisc1
# function 1 for lm_XX1, function 2 for lm_XX2
fun1<-function(x){
res<-c(paste(as.character(summary(x)$call), "1"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call", "call", "call", "intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
fun2<-function(x){
res<-c(paste(as.character(summary(x)$call), "2"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call", "call", "call", "intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
fun3<-function(x){
res<-c(paste(as.character(summary(x)$call), "3"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call", "call", "call", "intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
fun4<-function(x){
res<-c(paste(as.character(summary(x)$call), "4"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call", "call", "call", "intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
fun5<-function(x){
res<-c(paste(as.character(summary(x)$call), "5"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call", "call", "call", "intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
fun6<-function(x){
res<-c(paste(as.character(summary(x)$call), "6"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call", "call", "call", "intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
ins1 <- fun1(lm_ins1)
pisc1 <- fun1(lm_pisc1)
pisc2 <- fun2(lm_pisc2)
pisc3 <- fun3(lm_pisc3)
pisc4 <- fun4(lm_pisc4)
pisc5 <- fun5(lm_pisc5)
plank1 <- fun1(lm_plank1)
plank2 <- fun2(lm_plank2)
plank3 <- fun3(lm_plank3)
plank4 <- fun4(lm_plank4)
plank5 <- fun5(lm_plank5)
pred1 <- fun1(lm_pred1)
pred2 <- fun2(lm_pred2)
pred3 <- fun3(lm_pred3)
pred4 <- fun4(lm_pred4)
pred5 <- fun5(lm_pred5)
pred6 <- fun6(lm_pred6)
prepis1 <- fun1(lm_prepis1)
re1 <- cbind(ins1, pisc1, pisc2, pisc3, pisc4, pisc5, plank1, plank2, plank4,
plank5, pred1, pred2, pred3, pred4, pred5, pred6, prepis1)
re1 <- cbind(ins1, pisc1, pisc2, pisc3, pisc4, pisc5, plank1, plank2, plank4,
plank5, pred1, pred2, pred3, pred4, pred5, pred6, prepis1)
View(re1)
#function to print summary table
# Can't figure out how to print the input of the function, e.g. lm_pisc1
# function 1 for lm_XX1, function 2 for lm_XX2
fun1<-function(x){
res<-c(paste(as.character(summary(x)$call), "1"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call1", "call2", "call", "intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
fun2<-function(x){
res<-c(paste(as.character(summary(x)$call), "2"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call1", "call2", "call", "intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
fun3<-function(x){
res<-c(paste(as.character(summary(x)$call), "3"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call1", "call2", "call", "intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
fun4<-function(x){
res<-c(paste(as.character(summary(x)$call), "4"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call1", "call2", "call", "intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
fun5<-function(x){
res<-c(paste(as.character(summary(x)$call), "5"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call1", "call2", "call", "intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
fun6<-function(x){
res<-c(paste(as.character(summary(x)$call), "6"), #add 1 behind each call
x$coefficients[1],
x$coefficients[2],
length(x$model),
summary(x)$coefficients[2,2],
summary(x)$r.squared,
summary(x)$adj.r.squared,
summary(x)$fstatistic,
pf(summary(x)$fstatistic[1],summary(x)$fstatistic[2],summary(x)$fstatistic[3],lower.tail=FALSE))
names(res)<-c("call1", "call2", "call", "intercept","slope","n","slope.SE","r.squared","Adj. r.squared",
"F-statistic","numdf","dendf","p.value")
return(res)}
ins1 <- fun1(lm_ins1)
pisc1 <- fun1(lm_pisc1)
pisc2 <- fun2(lm_pisc2)
pisc3 <- fun3(lm_pisc3)
pisc4 <- fun4(lm_pisc4)
pisc5 <- fun5(lm_pisc5)
plank1 <- fun1(lm_plank1)
plank2 <- fun2(lm_plank2)
plank3 <- fun3(lm_plank3)
plank4 <- fun4(lm_plank4)
plank5 <- fun5(lm_plank5)
pred1 <- fun1(lm_pred1)
pred2 <- fun2(lm_pred2)
pred3 <- fun3(lm_pred3)
pred4 <- fun4(lm_pred4)
pred5 <- fun5(lm_pred5)
pred6 <- fun6(lm_pred6)
prepis1 <- fun1(lm_prepis1)
re1 <- cbind(ins1, pisc1, pisc2, pisc3, pisc4, pisc5, plank1, plank2, plank4,
plank5, pred1, pred2, pred3, pred4, pred5, pred6, prepis1)
View(re1)
View(re1)
res22 <- re1[-1, ]
View(res22)
View(re1)
res22 <- re1[-c(1,2,6,7,9,11,12), ]
View(res22)
re2 <- t(res22)
View(re2)
re1 <- cbind(ins1, pisc1, pisc2, pisc3, pisc4, pisc5, plank1, plank2, plank4,
plank5, pred1, pred2, pred3, pred4, pred5, pred6, prepis1)
res22 <- re1[-c(1,2,3,6,7,9,11,12), ]
re2 <- t(res22)
View(re2)
ins1 <- fun1(lm_ins1)
pisc1 <- fun1(lm_pisc1)
pisc2 <- fun1(lm_pisc2)
pisc3 <- fun1(lm_pisc3)
pisc4 <- fun1(lm_pisc4)
pisc5 <- fun1(lm_pisc5)
plank1 <- fun1(lm_plank1)
plank2 <- fun1(lm_plank2)
plank3 <- fun1(lm_plank3)
plank4 <- fun1(lm_plank4)
plank5 <- fun1(lm_plank5)
pred1 <- fun1(lm_pred1)
pred2 <- fun1(lm_pred2)
pred3 <- fun1(lm_pred3)
pred4 <- fun1(lm_pred4)
pred5 <- fun1(lm_pred5)
pred6 <- fun1(lm_pred6)
prepis1 <- fun1(lm_prepis1)
re1 <- cbind(ins1, pisc1, pisc2, pisc3, pisc4, pisc5, plank1, plank2, plank4,
plank5, pred1, pred2, pred3, pred4, pred5, pred6, prepis1)
res22 <- re1[-c(1,2,3,6,7,9,11,12), ]
re2 <- t(res22)
View(re2)
myfun(MyDF)
write.csv(re2,"../results/PP_Regress_Results.csv")
getwd()
# bind by columns
re1 <- cbind(ins1, pisc1, pisc2, pisc3, pisc4, pisc5, plank1, plank2, plank4,
plank5, pred1, pred2, pred3, pred4, pred5, pred6, prepis1)
#delete unnecessary rows and transpose
res22 <- re1[-c(1,2,3,6,7,9,11,12), ]
re2 <- t(res22)
write.csv(re2, "../results/PP_Regress_Results.csv")
#Save in the result directory as a pdf file
pdf("../results/PP_Regress_Plot.pdf")
myfun(MyDF)
#For loop
#for (i in unique(MyDF$Type.of.feeding.interaction)){
#subseted_df <- subset(MyDF, Type.of.feeding.interaction == i)
#par(mfcol=c(5,1))
#myfun(subseted_df)
#}
graphics.off()
#Load ats
load('../data/KeyWestAnnualMeanTemperature.RData')
#Load package
library(tidyverse)
#new column of ats$Temp shifted by one
df_after<-ats %>%
mutate(second_col=Temp) %>% #copy column
mutate_at(c("second_col"), list(lead), n = 1 )#shift by 1 with lead()
#Calculate the correlation coefficient for t and t-1
cor(df_after$Temp, df_after$second_col, use = "complete.obs")
random1 <- numeric(nreps)
nreps <- 10000
random1 <- numeric(nreps)
for (i in 1:nreps){
Y <- df_after$Temp
X <- sample(df_after$second_col, 100, replace = F)
random1[i] <- cor(X, Y, use = "complete.orbs")
}
#Calculate the correlation coefficient for t and t-1
cor(df_after$Temp, df_after$second_col, use = "complete.obs")
for (i in 1:nreps){
Y <- df_after$Temp
X <- sample(df_after$second_col, 100, replace = F)
random1[i] <- cor(X, Y, use = "complete.obs")
}
#Calculate the correlation coefficient for t and t-1
obss <- cor(df_after$Temp, df_after$second_col, use = "complete.obs")
#Calculate p-value
prob <- length(random1[random1 >= obss])/nreps
prob
# Plot!
hist(random1, breaks = 50,
main =  expression(paste("Distribution around ",rho, "= 0")),
xlab = "Correlation coefficients")
obss <- round(obss, digits = 3)
legend(.40, 200, obss, bty = "n")
arrows(.5,150,.53, 10)
legend(.30, 200, obss, bty = "n")
legend(.30, 400, obss, bty = "n")
arrows(.3,150,.326, 10)
legend(.30, 400)
legend(.30, 400, obss)
legend(.30, 400, obss, bty = "n") #bty = n gets rid of the box
arrows(.30, 400, .326, 10)
legend(.25, 400, obss, bty = "n") #bty = n gets rid of the box
legend(.22, 400, obss, bty = "n") #bty = n gets rid of the box
arrows(.25, 250, .326, 10)
arrows(.3, 250, .326, 10)
arrows(.3, 300, .326, 10)
# Plot!
hist(random1, breaks = 50,
main =  expression(paste("Distribution around ",rho, "= 0")),
xlab = "Correlation coefficients")
obss <- round(obss, digits = 3)
legend(.22, 400, obss, bty = "n") #bty = n gets rid of the box
arrows(.3, 300, .326, 10)
